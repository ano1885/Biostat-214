return(x^2)
} else {
x
}
square.pos(10)
square.pos <- function(x) {
if (x > 0) {
return(x^2)
} else {
x
}
}
x <- sample(-10:10, 1)
x
square.pos(x)
myfn <- function(type = "alpha") {
cat("You have selected type '", type, "'\n", sep = "")
}
myfn("beta")
total.NAs.byRow <- apply(a, 1, function(i)  sum(is.na(i)))
total.NAs.byCol <- apply(a, 2, function(i)  sum(is.na(i)))
index.NAs <- is.na(a)
apply(index.NAs, 1, sum)
apply(index.NAs, 2, sum)
a <- sapply(1:10, function(i) rnorm(30))
dim(a)
a[1, 5] <- a[1, 7] <- a[1, 9] <- a[1, 10] <- a[12, 9] <- a[20, 9] <- a[27, 6] <- a[29, 6] <- NA
a
total.NAs.byRow <- apply(a, 1, function(i)  sum(is.na(i)))
total.NAs.byCol <- apply(a, 2, function(i)  sum(is.na(i)))
index.NAs <- is.na(a)
apply(index.NAs, 1, sum)
apply(index.NAs, 2, sum)
total.NAs.byRow <- apply(a, 1, function(i)  sum(is.na(i)))
total.NAs.byCol <- apply(a, 2, function(i)  sum(is.na(i)))
index.NAs <- is.na(a)
apply(index.NAs, 1, sum)
apply(index.NAs, 2, sum)
?apply
head(apply(x, 1, mean))
x <- iris[, -5]
apply(x,      # array with 'dim' attribute, most commonly 2D matrix or data.frame
MARGIN = 2, # integer vector or character indicating dimensions over which 'FUN' will be applied
FUN = mean) # function to apply
aggregate(iris, by = list(iris$Species), mean)
aggregate(. ~ Species, iris, mean)
#. means every variable grouped by species
aggregate(. ~ Species, iris, mean)
#. means every variable grouped by species
?aggregate
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=function(x) mean(x,na.rm=TRUE)
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=mean,na.rm=TRUE)
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=mean,na.rm=TRUE)
RS<-read.csv('Biostat 214 data.csv')
#Heatmap of variables
RS_matrix<-data.matrix(RS[,c("mucin_concentration_v1","v1_fga_fgb_fgg", "v1_tnfrsf1a", "v1_tnfrsf1b")])
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=mean,na.rm=TRUE)
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=function(x) mean(x,na.rm=TRUE)
tapply(X=RS$rds30_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$current_smoker_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Age stopped smoking
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
?lm
library(rtemis)
#Read in data
setwd("C:/Users/aoh/Dropbox/TICR/BIOSTAT 214_Advanced R/Final Project")
RS<-read.csv('Biostat 214 data.csv')
#Check data
dim(RS)
str(RS)
names(RS)
checkData(RS)
table(RS$resmoke)
#Visualization
#mucin concentration
hist(RS$mucin_concentration_v1)
#Transform mucin to logarithm scale
mucin_log<-log(RS$mucin_concentration_v1)
hist(mucin_log)
#Fibrinogen
hist(RS$v1_fga_fgb_fgg)
#Soluble TNFa-1
hist(RS$v1_tnfrsf1a)
#Transform TNFa-1
tnf1a_log<-log(RS$v1_tnfrsf1a)
hist(tnf1a_log)
#Soluble TNFb-1
hist(RS$v1_tnfrsf1b)
#Transform TNFa-1
tnf1b_log<-log(RS$v1_tnfrsf1b)
hist(tnf1b_log)
#mucin concentration
mu<-lm(mucin_log~factor(RS$resmoke))
mu1<-lm(mucin_concentration_v1 ~ factor(resmoke), data=RS)
summary(mu1)$coefficients
summary(mu)$coefficients
mu<-lm(mucin_log~factor(RS$resmoke))
summary(mu)$coefficients
tapply(X=RS$asthma_dx_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Spirometry data
tapply(X=RS$pct_post_fev1_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$pct_post_fev1fvc_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Age started smoking
tapply(X=RS$rds28_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Data Summary
tapply(X=RS$age_derv_v1, INDEX=RS$resmoke, FUN=mean)
tapply(X=RS$gender, INDEX=RS$resmoke, FUN=mean)
tapply(X=RS$current_smoker_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$smoking_pack_years_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Average # of cigarettes smoke/day
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=mean,na.rm=TRUE)
#Age stopped smoking
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Age started smoking
tapply(X=RS$rds28_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Spirometry data
tapply(X=RS$pct_post_fev1_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$pct_post_fev1fvc_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#mucin concentration
mu<-lm(mucin_log~factor(RS$resmoke))
summary(mu)$coefficients
#Fibrinogen
hist(RS$v1_fga_fgb_fgg)
hist(RS$v1_crp)
#transform crp
crp_log<-log(RS$v1_crp)
hist(crp_log)
#CRP
crp<-lm(crp_log~factor(RS$resmoke))
summary(crp)$coefficients
hist(RS$v1_fga_fgb_fgg)
fibrin<-log(RS$v1_fga_fgb_fgg)
hist(fibrin)
hist(fibrin)
#Fibrinogen
fibrin<-lm(RS$v1_fga_fgb_fgg~factor(RS$resmoke))
summary(fibrin)$coefficients
#Soluble TNFa-1
tnf1a<-lm(tnf1a_log~factor(RS$resmoke))
#Soluble TNFb-1
tnf1b<-lm(tnf1b_log~factor(RS$resmoke))
summary(tnf1b)$coefficients
#Fibrinogen
fibrin<-lm(fibrin_log~factor(RS$resmoke))
#Transform fibrinogen to logarithm scale
fibrin_log<-log(RS$v1_fga_fgb_fgg)
#Fibrinogen
fibrin<-lm(fibrin_log~factor(RS$resmoke))
summary(fibrin)$coefficients
CRP_mv<-lm(crp_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$race + RS$current_smoker_v1 + RS$rds16_v1)
summary(CRP_mv)$coefficients
summary(crp)$coefficients
table(RS$resmoke)
hist(crp_log)
hist(crp_log)
hist(mucin_log)
hist(tnf1a_log)
hist(tnf1b_log)
hist(fibrin_log)
#Heatmap of variables
RS_matrix<-data.matrix(RS[,c("mucin_concentration_v1","v1_fga_fgb_fgg", "v1_tnfrsf1a", "v1_tnfrsf1b")])
mydistfunPearson = function(x) {
t.dist = 1 - cor(t(x), use="pairwise")
t.limit <- 1.1*max(t.dist,na.rm=TRUE)
t.dist[is.na(t.dist)] = t.limit
t.dist = as.dist(t.dist)
return(t.dist)
}
mydistfunEuc = function(x) {
t.dist = dist(x)
t.limit <- 1.1*max(t.dist,na.rm=TRUE)
t.dist[is.na(t.dist)] = t.limit
return(t.dist)
}
# EITHER
# standardize (mean center and scale by standard deviation) the data across each gene, so that genes with high expression don't outweigh genes with low expression
RS_matrix = t(scale(RS_matrix))
# Get max/min 90% of data for the color lookup table that will be used to color the individual blocks of the heatmap. Basically, doing this so outliers don't set the color limits leading to most things in between looking the same.
x = as.vector(RS_matrix)
z = (x-mean(x,na.rm=TRUE)) / sd(x,na.rm=TRUE)
rm.index = which(pnorm(abs(z), lower.tail=FALSE) < 0.05)
x[rm.index] = NA
maxvalue = max(x,na.rm=TRUE)
minvalue = min(x,na.rm=TRUE)
#Finally, use the heatmap.2 function from the gplots package. Change "average" to "complete" for complete linkage, and change mydistfunPearson to mydistfunEuc for Euclidean distance. I find that the two different distance functions highlight different aspects of the data, with the Euclidean distance metric tending to put outlier samples into their own polarized branch.
heatmap.2(RS_matrix,distfun=mydistfunEuc,hclustfun=function(x) hclust(x,method="complete"),cexRow=0.7,breaks=seq(minvalue,maxvalue,length.out=76),col=bluered(75),na.color="grey",offsetRow=0,trace="none",density.info="none")
mydistfunPearson = function(x) {
t.dist = 1 - cor(t(x), use="pairwise")
t.limit <- 1.1*max(t.dist,na.rm=TRUE)
t.dist[is.na(t.dist)] = t.limit
t.dist = as.dist(t.dist)
return(t.dist)
}
mydistfunEuc = function(x) {
t.dist = dist(x)
t.limit <- 1.1*max(t.dist,na.rm=TRUE)
t.dist[is.na(t.dist)] = t.limit
return(t.dist)
}
# EITHER
# standardize (mean center and scale by standard deviation) the data across each gene, so that genes with high expression don't outweigh genes with low expression
RS_matrix = t(scale(RS_matrix))
# Get max/min 90% of data for the color lookup table that will be used to color the individual blocks of the heatmap. Basically, doing this so outliers don't set the color limits leading to most things in between looking the same.
x = as.vector(RS_matrix)
z = (x-mean(x,na.rm=TRUE)) / sd(x,na.rm=TRUE)
rm.index = which(pnorm(abs(z), lower.tail=FALSE) < 0.05)
x[rm.index] = NA
maxvalue = max(x,na.rm=TRUE)
minvalue = min(x,na.rm=TRUE)
#Finally, use the heatmap.2 function from the gplots package. Change "average" to "complete" for complete linkage, and change mydistfunPearson to mydistfunEuc for Euclidean distance. I find that the two different distance functions highlight different aspects of the data, with the Euclidean distance metric tending to put outlier samples into their own polarized branch.
heatmap.2(RS_matrix,distfun=mydistfunEuc,hclustfun=function(x) hclust(x,method="complete"),cexRow=0.7,breaks=seq(minvalue,maxvalue,length.out=76),col=bluered(75),na.color="grey",offsetRow=0,trace="none",density.info="none")
#Finally, use the heatmap.2 function from the gplots package. Change "average" to "complete" for complete linkage, and change mydistfunPearson to mydistfunEuc for Euclidean distance. I find that the two different distance functions highlight different aspects of the data, with the Euclidean distance metric tending to put outlier samples into their own polarized branch.
library(gplots)
heatmap.2(RS_matrix,distfun=mydistfunEuc,hclustfun=function(x) hclust(x,method="complete"),cexRow=0.7,breaks=seq(minvalue,maxvalue,length.out=76),col=bluered(75),na.color="grey",offsetRow=0,trace="none",density.info="none")
heatmap.2(RS_matrix,distfun=mydistfunEuc,hclustfun=function(x) hclust(x,method="complete"),cexRow=0.7,breaks=seq(minvalue,maxvalue,length.out=76),col=bluered(75),na.color="grey",offsetRow=0,trace="none",density.info="none")
#Heatmap of variables
RS_matrix<-data.matrix(RS[,c("v1_crp","mucin_concentration_v1","v1_fga_fgb_fgg", "v1_tnfrsf1a", "v1_tnfrsf1b")])
mydistfunPearson = function(x) {
t.dist = 1 - cor(t(x), use="pairwise")
t.limit <- 1.1*max(t.dist,na.rm=TRUE)
t.dist[is.na(t.dist)] = t.limit
t.dist = as.dist(t.dist)
return(t.dist)
}
mydistfunEuc = function(x) {
t.dist = dist(x)
t.limit <- 1.1*max(t.dist,na.rm=TRUE)
t.dist[is.na(t.dist)] = t.limit
return(t.dist)
}
# EITHER
# standardize (mean center and scale by standard deviation) the data across each gene, so that genes with high expression don't outweigh genes with low expression
RS_matrix = t(scale(RS_matrix))
# Get max/min 90% of data for the color lookup table that will be used to color the individual blocks of the heatmap. Basically, doing this so outliers don't set the color limits leading to most things in between looking the same.
x = as.vector(RS_matrix)
z = (x-mean(x,na.rm=TRUE)) / sd(x,na.rm=TRUE)
rm.index = which(pnorm(abs(z), lower.tail=FALSE) < 0.05)
x[rm.index] = NA
maxvalue = max(x,na.rm=TRUE)
minvalue = min(x,na.rm=TRUE)
#Finally, use the heatmap.2 function from the gplots package. Change "average" to "complete" for complete linkage, and change mydistfunPearson to mydistfunEuc for Euclidean distance. I find that the two different distance functions highlight different aspects of the data, with the Euclidean distance metric tending to put outlier samples into their own polarized branch.
library(gplots)
heatmap.2(RS_matrix,distfun=mydistfunEuc,hclustfun=function(x) hclust(x,method="complete"),cexRow=0.7,breaks=seq(minvalue,maxvalue,length.out=76),col=bluered(75),na.color="grey",offsetRow=0,trace="none",density.info="none")
heatmap.2(RS_matrix,distfun=mydistfunEuc,hclustfun=function(x) hclust(x,method="complete"),cexRow=0.7,breaks=seq(minvalue,maxvalue,length.out=76),col=bluered(75),na.color="grey",offsetRow=0,trace="none",density.info="none")
tapply(X=RS$age_derv_v1, INDEX=RS$resmoke, FUN=mean)
tapply(X=RS$gender, INDEX=RS$resmoke, FUN=mean)
tapply(X=RS$current_smoker_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
?tapply
tapply(X=RS$current_smoker_v1, INDEX=RS$resmoke, FUN=count, na.rm=TRUE)
> tapply(X=RS$current_smoker_v1, INDEX=RS$resmoke, FUN=NULL, na.rm=TRUE)
#Data Summary
tapply(X=RS$age_derv_v1, INDEX=RS$resmoke, FUN=mean)
tapply(X=RS$smoking_pack_years_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Average # of cigarettes smoke/day
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=mean,na.rm=TRUE)
#Age started smoking
tapply(X=RS$rds28_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Age stopped smoking
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Spirometry data
tapply(X=RS$pct_post_fev1_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$pct_post_fev1fvc_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean SD, na.rm=TRUE)
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean, SD, na.rm=TRUE)
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean, sd, na.rm=TRUE)
smokeyrs<-(RS$rds31_v1)-(RS$rds31_v1)
tapply(smokeyrs, FUN=mean, na.rm=TRUE)
tapply(smokeyrs, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
smokeyrs<-((RS$rds31_v1)-(RS$rds31_v1), na.rm=TRUE))
smokeyrs<-((RS$rds31_v1)-(RS$rds31_v1), na.rm=TRUE)
#Data Summary
tapply(X=RS$age_derv_v1, INDEX=RS$resmoke, FUN=mean)
tapply(X=RS$smoking_pack_years_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Average # of cigarettes smoke/day
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=mean,na.rm=TRUE)
#Age started smoking
tapply(X=RS$rds28_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Age stopped smoking
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Spirometry data
tapply(X=RS$pct_post_fev1_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$pct_post_fev1fvc_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
crp<-lm(crp_log~factor(RS$resmoke))
summary(crp)$coefficients
#CRP
crp<-lm(crp_log~factor(RS$resmoke))
summary(crp)$coefficients
#mucin concentration
mu<-lm(mucin_log~factor(RS$resmoke))
summary(mu)$coefficients
#Fibrinogen
fibrin<-lm(fibrin_log~factor(RS$resmoke))
summary(fibrin)$coefficients
#Soluble TNFa-1
tnf1a<-lm(tnf1a_log~factor(RS$resmoke))
summary(tnf1a)$coefficients
#Soluble TNFb-1
tnf1b<-lm(tnf1b_log~factor(RS$resmoke))
summary(tnf1b)$coefficients
#Multivariate analysis
#adjusting for age, cigarette pack-years
CRP_mv<-lm(crp_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(CRP_mv)$coefficients
class(RS$current_smoker_v1)
#Multivariate analysis
#adjusting for age, cigarette pack-years
CRP_mv<-lm(crp_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(CRP_mv)$coefficients
mucin_mv<-lm(mucin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(mucin_mv)$coefficients
#Multivariate analysis
#adjusting for age, cigarette pack-years
CRP_mv<-lm(crp_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(CRP_mv)$coefficients
mucin_mv<-lm(mucin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(mucin_mv)$coefficients
fibrinogen_mv<-lm(fibrin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(fibrinogen_mv)$coefficients
tnf1a_mvmv<-lm(tnf1a_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1a_mvmv)$coefficients
tnf1b_mv<-lm(tnf1b_log~~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
#Multivariate analysis
#adjusting for age, cigarette pack-years
CRP_mv<-lm(crp_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(CRP_mv)$coefficients
mucin_mv<-lm(mucin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(mucin_mv)$coefficients
fibrinogen_mv<-lm(fibrin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(fibrinogen_mv)$coefficients
tnf1a_mvmv<-lm(tnf1a_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1a_mvmv)$coefficients
tnf1b_mv<-lm(tnf1b_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1b_mv)$coefficients
tnf1b_mv<-lm(tnf1b_log~factor1b(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
?lm
#CRP
crp<-lm(crp_log~factor(RS$resmoke))
summary(crp)$coefficients
#mucin concentration
mu<-lm(mucin_log~factor(RS$resmoke))
summary(mu)$coefficients
#Fibrinogen
fibrin<-lm(fibrin_log~factor(RS$resmoke))
summary(fibrin)$coefficients
#Soluble TNFa-1
tnf1a<-lm(tnf1a_log~factor(RS$resmoke))
summary(tnf1a)$coefficients
#Soluble TNFb-1
tnf1b<-lm(tnf1b_log~factor(RS$resmoke))
summary(tnf1b)$coefficients
display(9.239788e-02)
#Multivariate analysis
#adjusting for age, cigarette pack-years
CRP_mv<-lm(crp_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(CRP_mv)$coefficients
mucin_mv<-lm(mucin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(mucin_mv)$coefficients
fibrinogen_mv<-lm(fibrin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(fibrinogen_mv)$coefficients
tnf1a_mvmv<-lm(tnf1a_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1a_mvmv)$coefficients
tnf1b_mv<-lm(tnf1b_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1b_mv)$coefficients
crp<-lm(crp_log~factor(RS$resmoke))
summary(crp)$coefficients
#CRP
crp<-lm(crp_log~factor(RS$resmoke))
summary(crp)$coefficients
#mucin concentration
mu<-lm(mucin_log~factor(RS$resmoke))
summary(mu)$coefficients
#Fibrinogen
fibrin<-lm(fibrin_log~factor(RS$resmoke))
summary(fibrin)$coefficients
#Soluble TNFa-1
tnf1a<-lm(tnf1a_log~factor(RS$resmoke))
summary(tnf1a)$coefficients
#Soluble TNFb-1
tnf1b<-lm(tnf1b_log~factor(RS$resmoke))
summary(tnf1b)$coefficients
#Multivariate analysis
#adjusting for age, cigarette pack-years
CRP_mv<-lm(crp_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(CRP_mv)$coefficients
mucin_mv<-lm(mucin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(mucin_mv)$coefficients
fibrinogen_mv<-lm(fibrin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(fibrinogen_mv)$coefficients
tnf1a_mvmv<-lm(tnf1a_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1a_mvmv)$coefficients
tnf1b_mv<-lm(tnf1b_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1b_mv)$coefficients
library(rtemis)
#Read in data
setwd("C:/Users/aoh/Dropbox/TICR/BIOSTAT 214_Advanced R/Final Project")
RS<-read.csv('Biostat 214 data.csv')
#Check data
dim(RS)
str(RS)
names(RS)
checkData(RS)
table(RS$resmoke)
#Visualization
#CRP
hist(RS$v1_crp)
#transform crp
crp_log<-log(RS$v1_crp)
hist(crp_log)
#mucin concentration
hist(RS$mucin_concentration_v1)
#Transform mucin to logarithm scale
mucin_log<-log(RS$mucin_concentration_v1)
hist(mucin_log)
#Fibrinogen
hist(RS$v1_fga_fgb_fgg)
#Transform fibrinogen to logarithm scale
fibrin_log<-log(RS$v1_fga_fgb_fgg)
hist(fibrin_log)
#Soluble TNFa-1
hist(RS$v1_tnfrsf1a)
#Transform TNFa-1
tnf1a_log<-log(RS$v1_tnfrsf1a)
hist(tnf1a_log)
#Soluble TNFb-1
hist(RS$v1_tnfrsf1b)
#Transform TNFa-1
tnf1b_log<-log(RS$v1_tnfrsf1b)
hist(tnf1b_log)
#Heatmap of variables
RS_matrix<-data.matrix(RS[,c("v1_crp","mucin_concentration_v1","v1_fga_fgb_fgg", "v1_tnfrsf1a", "v1_tnfrsf1b")])
mydistfunPearson = function(x) {
t.dist = 1 - cor(t(x), use="pairwise")
t.limit <- 1.1*max(t.dist,na.rm=TRUE)
t.dist[is.na(t.dist)] = t.limit
t.dist = as.dist(t.dist)
return(t.dist)
}
mydistfunEuc = function(x) {
t.dist = dist(x)
t.limit <- 1.1*max(t.dist,na.rm=TRUE)
t.dist[is.na(t.dist)] = t.limit
return(t.dist)
}
# EITHER
# standardize (mean center and scale by standard deviation) the data across each gene, so that genes with high expression don't outweigh genes with low expression
RS_matrix = t(scale(RS_matrix))
# Get max/min 90% of data for the color lookup table that will be used to color the individual blocks of the heatmap. Basically, doing this so outliers don't set the color limits leading to most things in between looking the same.
x = as.vector(RS_matrix)
z = (x-mean(x,na.rm=TRUE)) / sd(x,na.rm=TRUE)
rm.index = which(pnorm(abs(z), lower.tail=FALSE) < 0.05)
x[rm.index] = NA
maxvalue = max(x,na.rm=TRUE)
minvalue = min(x,na.rm=TRUE)
#Finally, use the heatmap.2 function from the gplots package. Change "average" to "complete" for complete linkage, and change mydistfunPearson to mydistfunEuc for Euclidean distance. I find that the two different distance functions highlight different aspects of the data, with the Euclidean distance metric tending to put outlier samples into their own polarized branch.
library(gplots)
heatmap.2(RS_matrix,distfun=mydistfunEuc,hclustfun=function(x) hclust(x,method="complete"),cexRow=0.7,breaks=seq(minvalue,maxvalue,length.out=76),col=bluered(75),na.color="grey",offsetRow=0,trace="none",density.info="none")
#Data Summary
tapply(X=RS$age_derv_v1, INDEX=RS$resmoke, FUN=mean)
tapply(X=RS$smoking_pack_years_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Average # of cigarettes smoke/day
tapply(X=RS$rds32_v1, INDEX=RS$resmoke, FUN=mean,na.rm=TRUE)
#Age started smoking
tapply(X=RS$rds28_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Age stopped smoking
tapply(X=RS$rds31_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#Spirometry data
tapply(X=RS$pct_post_fev1_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
tapply(X=RS$pct_post_fev1fvc_v1, INDEX=RS$resmoke, FUN=mean, na.rm=TRUE)
#CRP
crp<-lm(crp_log~factor(RS$resmoke))
summary(crp)$coefficients
#mucin concentration
mu<-lm(mucin_log~factor(RS$resmoke))
summary(mu)$coefficients
#Fibrinogen
fibrin<-lm(fibrin_log~factor(RS$resmoke))
summary(fibrin)$coefficients
#Soluble TNFa-1
tnf1a<-lm(tnf1a_log~factor(RS$resmoke))
summary(tnf1a)$coefficients
#Soluble TNFb-1
tnf1b<-lm(tnf1b_log~factor(RS$resmoke))
summary(tnf1b)$coefficients
#Multivariate analysis
#adjusting for age, cigarette pack-years
CRP_mv<-lm(crp_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(CRP_mv)$coefficients
mucin_mv<-lm(mucin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(mucin_mv)$coefficients
fibrinogen_mv<-lm(fibrin_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(fibrinogen_mv)$coefficients
tnf1a_mvmv<-lm(tnf1a_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1a_mvmv)$coefficients
tnf1b_mv<-lm(tnf1b_log~factor(RS$resmoke)+ RS$age_derv_v1 + RS$smoking_pack_years_v1)
summary(tnf1b_mv)$coefficients
getwd()
setwd("C:/Users/aoh/Dropbox/TICR/BIOSTAT 214_Advanced R/Final Project")
unlink('Biostat 214_Anita Oh project_cache', recursive = TRUE)
library(knitr)
#library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
knitr::opts_chunk$set(error = FALSE)
library(knitr)
#library(ggplot2)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
knitr::opts_chunk$set(error = FALSE)
remove.packages("yaml")
install.packages("yaml")
install.packages("yaml")
